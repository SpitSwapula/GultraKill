@name Ultrakill Movement v4.1
@inputs 
@outputs SProps:array Stamina Bar
@persist OM PlayerSpeed Stamina SlideSpeed SlamSpeed JumpPower Sliding Smashing Slammed DashMAX DashSpeed [LockedVec DashVec PlayerVelocity PlayerInertia AppliedForces]:vector SProps:array DashTime SmashTime FallTime FDT WallJumps SlamStored StoredFall StoredLimit StoredFallTime SFT
@trigger 
#note that because of how source movement works, walljumping works best if you hold no movement keys while walljumping

#Goldenflare5643 was here ---> :)
#DID YOU KNOW, SOMETIMES A VECTORS ADDRESS STARTS AT 1 AND NOT ZERO???????????? ~G

if(first()){ 
    runOnTick(1)
    runOnLast(1)
    Time = systime()
    FallTime = Time
    StoredFallTime = Time

    findIncludeClass("npc")
    findIncludeClass("player")
    
    owner():propDrag(1)
    
    function void smash(){
        findInSphere(owner():pos(),300)
        local InArea = findToArray()
        
        for(I=1,InArea:count()){
            if(InArea[I,entity]:isAlive() & InArea[I,entity] != owner()){
                local NewHitProp = propSpawn("models/squad/sf_plates/sf_plate2x2.mdl",InArea[I,entity]:toWorld(vec(0,0,-3)),ang(0,0,0),0)
                NewHitProp:setMass(99999999)
                NewHitProp:applyForce(vec(0,0,1)*NewHitProp:mass()*3000)
                NewHitProp:setAlpha(0)
                NewHitProp:soundPlay(3000 + I,6,"weapons/bumper_car_hit_hard.wav")
                soundPitch(2000+I,randint(40,70))
                SProps:pushEntity(NewHitProp)
                        
                #ifdef entity:setCollisionGroup(string)
                    NewHitProp:setCollisionGroup(InArea[I,entity]:getCollisionGroup())
                #else
                #endif
            }
        }
        timer("cleanSProps",500)
    }
    
    function void useStoredFall(){
        StoredFall = StoredFall > 0 ? (StoredFall - 0.01 < 0 ? 0 : StoredFall - 0.05) : 0
        StoredFallTime = Time
    }
    
    holoCreate(1)
    holoModel(1,"models/holograms/hq_torus.mdl")
    holoColor(1,vec(150,150,150))
    holoAlpha(1,0)
    holoAng(1,ang(0,0,0))
    
    owner():disableFallDamage()
    
    WallJumps = 3
    Stamina = 0
    DashMAX = 0.2
    DashSpeed = 2500
    OM = owner():mass()
    PlayerSpeed = 200
    JumpPower = 550
    SlideSpeed = 500
    SlamSpeed = 2500
    StoredLimit = 10
    
    concmd("pac_event stamina1 0")
    concmd("pac_event stamina2 0")
    concmd("pac_event stamina3 0")
}

Time = systime()

if(clk("cleanSProps")){
    for(I=1,SProps:count()){
        SProps[I,entity]:propDelete()
        SProps:remove(I)
    }
}

R = rangerOffset(99999999999,owner():pos(),vec(0,0,-1))
OG      = owner():isOnGround() # only returns 1 when not in air (important!)

KW      = owner():keyForward()
KA      = owner():keyLeft()
KS      = owner():keyBack()
KD      = owner():keyRight()
KShift  = owner():keySprint()
KCtrl   = owner():keyDuck()
KAlt    = owner():keyWalk()
KSpace  = owner():keyPressed("space")
KJ      = owner():keyJump()

Alive = owner():isAlive()

if(changed(KShift)){
    owner():plySetSpeed(KShift ? PlayerSpeed : PlayerSpeed * 2)
}

PlayerVelocity = owner():vel()
PlayerInertia = owner():inertia()

if(changed(Alive) & Alive){
    owner():plySetJumpPower(JumpPower)
    owner():plySetSpeed(KShift ? PlayerSpeed : PlayerSpeed * 2)
}
####################################################

#dash

if(changed(KShift) & KShift & Stamina >= 33 & !Sliding){
    soundStop("wind")
    Stamina -= 33
    Smashing = 0
    StoredFall = 0
    
    if(OG){
        owner():plySetPos(owner():pos()+vec(0,0,1))
    }
    local EAR = owner():angles():right()*vec(1,1,0)
    local EAF = vec(-EAR[2], EAR[1], 0)
            
    if(KW|KA|KS|KD){
        DashVec = (KW*EAF + KA*-EAR + KS*-EAF + KD*EAR):normalized()
    }else{        
        DashVec = EAF
    }
    
    owner():soundPlay("dash",DashMAX + 0.1,"ambient/gas/cannister_loop.wav")
    soundPitch("dash",90)
    
    DashTime = Time
}

DDT = Time - DashTime

if(changed(KSpace) & KSpace & !Sliding & KJ & DDT <= DashMAX + 0.2){
    DashTime = 1
    DDT = 1
    owner():plyApplyForce(DashVec*DashSpeed / 4 + vec(0, 0, -JumpPower / 3))
}
if(DDT > DashMAX & DDT <= DashMAX + 0.1 + entity():cpuUsage() * 2){
    local Up = DDT - DashMAX < 0.1 ? DDT - DashMAX : 0.1
    owner():plyApplyForce(-(PlayerVelocity + PlayerInertia) + DashVec * (DashSpeed - (DashSpeed * (Up * 10)^2 < DashSpeed * 0.8 ? DashSpeed * (Up * 10)^2 : DashSpeed * 0.8)))
}
elseif(DDT <= DashMAX){
    owner():plyApplyForce(-(PlayerVelocity + PlayerInertia) + DashVec * DashSpeed)
}

#pac3 hud?

if(Stamina < 99 & !Sliding){
    local Remaining = 99 - Stamina
    local Itr = (Remaining > 0.35) ? 0.35 : Remaining
    Stamina += Itr
    
    Bar = int(Stamina/33)
    
    if(changed(Bar)){
        if($Bar > 0){
            owner():soundPlay("staminaRegen",1,"buttons/blip1.wav")
            soundVolume("staminaRegen",0.1)
            switch(Bar){
                case 1,
                    soundPitch("staminaRegen",179)
                    concmd("pac_event stamina1 1")
                break
                
                case 2,
                    soundPitch("staminaRegen",193)
                    concmd("pac_event stamina2 1")
                break  
    
                case 3,
                    soundPitch("staminaRegen",211)
                    concmd("pac_event stamina3 1")
                break          
            }
        }else{
            switch(Bar){
                case 0,
                    concmd("pac_event stamina1 0")           
                break
                
                case 1,
                    concmd("pac_event stamina2 0")
                break
                
                case 2,           
                    concmd("pac_event stamina3 0")
                break           
            }            
        }
    }
}

###################################################################

#jumping if's

if(changed(PlayerVelocity[3] < 0) & PlayerVelocity[3] < 0){
    FallTime = Time
}
if(changed(OG) & OG){
    StoredFall = StoredFall < StoredLimit ? StoredFall + FDT : StoredLimit
    StoredFallTime = Time
}
if(DDT > DashMAX + 0.1){
    FDT = Time - FallTime
    if(OG){
        SFT = Time - StoredFallTime
    }
}
if(OG & SFT >= 0.3 & !Sliding){
    StoredFall = 0
    Slammed = 0
}

if(changed(KSpace) & KSpace){
    if(Sliding){
        #slide jump

        Sliding = 0
        StoredFall = StoredFall < StoredLimit ? StoredFall : StoredLimit
        owner():plyApplyForce(LockedVec * (SlideSpeed + StoredFall * PlayerSpeed) + vec(0, 0, -(JumpPower / 2.5)))
    }elseif(!OG){
        #wall jump
        
        local EndVec = vec(0,0,0)
        
        for(I=1,8){
            local CurrVec = ang(0,(360/8)*I,0):forward()
            rangerFilter(owner())
            local WCR = rangerOffset(40,owner():pos()+vec(0,0,30),CurrVec)
            
            if(WCR:hit()){
                EndVec = EndVec + WCR:hitNormal()
                if(Smashing){
                    SlamStored = 1
                }
            }
        }
        
        
        if(EndVec != vec(0,0,0) & WallJumps > 0){
            EndVec = (EndVec * vec(1,1,0)):normalized()
            owner():plyApplyForce(-(PlayerVelocity + PlayerInertia) + vec(0,0,JumpPower * 0.8) + EndVec*400)
            owner():soundPlay("jump",3,"npc/dog/dog_pneumatic"+randint(1,2)+".wav")
            soundPitch("jump",90)
            WallJumps--
            
            if(WallJumps <= 0){
                owner():soundPlay("lastjump",3,"buttons/combine_button_locked.wav")
            }
        }
    }
    if(Slammed & !Sliding){
        owner():plyApplyForce(vec(0, 0, ((StoredFall * SlamSpeed) < JumpPower ? JumpPower : (StoredFall * SlamSpeed + JumpPower / 2 - JumpPower))))
        StoredFall = 0
        Slammed = 0
    }
}

#jumping and landing sounds

if(changed(OG) & !OG & (PlayerVelocity[3] >= JumpPower / 2) & !$Sliding){
    #ground jump
    
    #Sliding = 0 #just in case
    
    owner():soundPlay("jump",3,"npc/dog/dog_pneumatic"+randint(1,2)+".wav")
    soundPitch("jump",90)
}
if(changed(OG) & OG & !Smashing & FDT >= 0.4){
    owner():soundPlay("land",3,"physics/metal/metal_barrel_impact_hard"+randint(5,6)+".wav")
    soundPitch("land",90)
    soundVolume("land",FDT < 0.9 ? FDT : 0.9)
}

#refresh walljumps & other checks

if(OG){
    WallJumps = 3
}

##################################################
# slide n ground pound

if(changed(KCtrl)){
    if(OG){
        if(KCtrl){
            Sliding = 1
        }else{
            Sliding = 0
        }
    }else{
        if(KCtrl){
            Sliding = 0
            if(!Smashing){
                Smashing = 1
                FallTime = Time
                FDT = Time
                StoredFall = 0
            owner():soundPlay("wind",0,"coast.windmill")
            }
        }else{
            Sliding = 0
        }            
    }
}

if(changed(Sliding)){
    if(Sliding){
        concmd("pac_event slide 1")
        owner():soundPlay("slide",0,"physics/concrete/concrete_scrape_smooth_loop1.wav")
        soundPitch("slide",111)
        soundVolume("slide", 1)
        
        local EAR = owner():angles():right()*vec(1,1,0)
        local EAF = vec(-EAR[2], EAR[1], 0)
        
        if(KW|KA|KS|KD){
            LockedVec = (KW*EAF + KA*-EAR + KS*-EAF + KD*EAR):normalized() #if someone doesnt find a better method for making sure vectors dont go over 1 im gonna
            LockedVec[3] = 0 #im schizophrenic
        }else{
            LockedVec = EAF
        }
        
    }elseif(!first()){
        owner():soundPlay("stopSlide",0,"physics/metal/metal_canister_impact_hard"+randint(1, 3)+".wav")
        soundPitch("stopSlide",244)
        soundVolume("stopSlide",0.5)
        concmd("pac_event slide 0")
        owner():plySetGravity(600)
        soundStop("slide")
        LockedVec = vec(0,0,0)  
    }
}

if(Sliding){    
    rangerFilter(owner())
    local NearGround = R:distance() < 10
    
    #if(changed(NearGround)){
        if(NearGround){
            soundVolume("slide", 1)
        }else{
            soundVolume("slide", 0)
        }
    #}
    StoredFall = Slammed ? StoredFall * 100 : StoredFall
    local Speed = (NearGround ? SlideSpeed + 320 : SlideSpeed) + StoredFall * PlayerSpeed
    Slammed = 0
    owner():plyApplyForce(-vec(PlayerVelocity[0] + PlayerInertia[0], PlayerVelocity[2] + PlayerInertia[2], 0) + (LockedVec * Speed))
    useStoredFall()
}

if(Smashing){
    if(!SlamStored){
        owner():plyApplyForce(-(PlayerVelocity + PlayerInertia) + vec(0,0,-SlamSpeed))
    }
    if(OG){
        owner():soundPlay("smash",2,"physics/metal/metal_barrel_impact_hard6.wav")
        owner():soundPlay("smash2",3,"physics/metal/metal_barrel_impact_hard3.wav")
        soundStop("wind")
        soundPitch("smash2",50)
        
        smash()
        
        SmashTime = Time
        Smashing = 0
        Slammed = 1
        SlamStored = 0
        
        #Stamina = clamp(Stamina - 66,0,99) breaks hud, do not use
        
        holoPos(1,owner():pos())
    }    
}

### spot for smashjump??

SDT = Time - SmashTime
if(SDT < 1){
    local Up = SDT
    local Dampen = Up ^ (1/3)
    holoAlpha(1,150*(1-Up))
    holoScale(1,vec(30*Dampen,30*Dampen,10))
}else{
    holoScale(1,vec(0,0,10))
    holoAlpha(1,0)
}

##############################################################

if(last()){
    owner():plySetJumpPower(200)
    concmd("pac_event slide 0")
    owner():enableFallDamage()
    owner():plySetSpeed(200)
}

#by katsu
#aug 18, 2021
